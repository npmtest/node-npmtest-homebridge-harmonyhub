{"/home/travis/build/npmtest/node-npmtest-homebridge-harmonyhub/test.js":"/* istanbul instrument in package npmtest_homebridge_harmonyhub */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-harmonyhub/lib.npmtest_homebridge_harmonyhub.js":"/* istanbul instrument in package npmtest_homebridge_harmonyhub */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge_harmonyhub = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge_harmonyhub = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-harmonyhub/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge-harmonyhub && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge_harmonyhub */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge_harmonyhub\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge_harmonyhub.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_homebridge_harmonyhub.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge_harmonyhub.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_homebridge_harmonyhub.__dirname + '/lib.npmtest_homebridge_harmonyhub.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-harmonyhub/node_modules/homebridge-harmonyhub/index.js":"var Service, Characteristic, Accessory, uuid;\n\nmodule.exports = function (homebridge) {\n\tService = homebridge.hap.Service;\n\tCharacteristic = homebridge.hap.Characteristic;\n\tAccessory = homebridge.hap.Accessory;\n\tuuid = homebridge.hap.uuid;\n\tvar exportedTypes = {\n\t\tService: homebridge.hap.Service,\n\t\tCharacteristic: homebridge.hap.Characteristic,\n\t\tAccessory: homebridge.hap.Accessory,\n\t\tPlatformAccessory: homebridge.platformAccessory,\n\t\tuuid: homebridge.hap.uuid\n\t};\n\texportedTypes.AccessoryBase = require('./lib/accessory-base')(exportedTypes);\n\texportedTypes.HubAccessoryBase = require('./lib/hub-accessory-base')(exportedTypes);\n\texportedTypes.ActivityAccessory = require('./lib/activity-accessory')(exportedTypes);\n\texportedTypes.Hub = require('./lib/hub')(exportedTypes);\n\texportedTypes.HomePlatform = require('./lib/home-platform')(exportedTypes);\n\n\thomebridge.registerPlatform(\"homebridge-harmonyhub\", \"HarmonyHub\", exportedTypes.HomePlatform, true);\n};\n","/home/travis/build/npmtest/node-npmtest-homebridge-harmonyhub/node_modules/homebridge-harmonyhub/lib/accessory-base.js":"/**\n * Base class for all accessories in this plugin\n * Created by kraig on 3/20/16.\n */\n\nvar inherit = require('./inherit');\n\nvar Accessory, Service, Characteristic, uuid;\n\nmodule.exports = function(exportedTypes) {\n\tif (exportedTypes && !Accessory) {\n\t\tAccessory = exportedTypes.PlatformAccessory || exportedTypes.Accessory;\n\t\tService = exportedTypes.Service;\n\t\tCharacteristic = exportedTypes.Characteristic;\n\t\tuuid = exportedTypes.uuid;\n\t}\n\treturn AccessoryBase;\n};\nmodule.exports.AccessoryBase = AccessoryBase;\n\nfunction AccessoryBase(accessory, idKey, name, log) {\n\tthis.log = log;\n\n\tif (!accessory) {\n\t\tvar id = uuid.generate(idKey);\n\t\taccessory = new Accessory(name, id);\n\t\taccessory.name = name;\n\t\taccessory.uuid_base = id;\n\t\tif (!accessory.getServices) accessory.getServices = getServices.bind(accessory);\n\t}\n\tthis.accessory = accessory;\n\n\tthis.accessory.getService(Service.AccessoryInformation)\n\t\t.setCharacteristic(Characteristic.Manufacturer, \"Logitech\")\n\t\t.setCharacteristic(Characteristic.Model, \"Harmony\");\n}\n\nvar getServices = function(){\n\treturn this.services;\n};\n","/home/travis/build/npmtest/node-npmtest-homebridge-harmonyhub/node_modules/homebridge-harmonyhub/lib/inherit.js":"/**\n * Created by kraig on 3/20/16.\n */\n\nvar util = require('util');\n\nmodule.exports = { };\n\nvar mixin = module.exports.mixin = function(Class, MixinClass, doOverride) {\n\tvar mixinMethods = MixinClass.prototype || MixinClass;\n\tvar cls = Class.prototype || Class;\n\tfor (var mn in mixinMethods) {\n\t\tif (!doOverride && cls[mn] != undefined) return;\n\t\tcls[mn] = mixinMethods[mn];\n\t}\n};\n\nvar changeBase = module.exports.changeBase = function(Class, BaseClass) {\n\tvar orig = Class.prototype;\n\tutil.inherits(Class, BaseClass);\n\tClass.prototype.parent = BaseClass.prototype;\n\tmixin(Class, orig, true);\n};\n\nmodule.exports.fromInstance = function(inst, Class) {\n\tif (inst == null) {\n\t\treturn null;\n\t}\n\tif (!(inst instanceof Class)) {\n\t\tthrow new Error(\"Incorrect type. Expected \" + Class);\n\t}\n\tmixin(inst, Class, false);\n\treturn inst;\n};\n","/home/travis/build/npmtest/node-npmtest-homebridge-harmonyhub/node_modules/homebridge-harmonyhub/lib/activity-accessory.js":"/**\n * Created by kraig on 3/20/16.\n */\n\nvar util = require('util');\nvar inherit = require('./inherit');\nvar Promise = require('bluebird');\nvar queue = require('queue');\nvar HubAccessoryBase = require('./hub-accessory-base').HubAccessoryBase;\nvar HubConnection = require('./hub-connection');\nvar HubConnectionStatus = HubConnection.ConnectionStatus;\nvar _ = require('lodash');\n\nvar Service, Characteristic;\n\nmodule.exports = function(exportedTypes) {\n\tif (exportedTypes && !Service) {\n\t\tService = exportedTypes.Service;\n\t\tCharacteristic = exportedTypes.Characteristic;\n\t\tinherit.changeBase(ActivityService, Service.Switch);\n\t\tActivityService.UUID = Service.Switch.UUID;\n\t}\n\treturn ActivityAccessory;\n};\nmodule.exports.ActivityAccessory = ActivityAccessory;\n\nconst ActivityStatus = {\n\tOff: 0,\n\tStarting: 1,\n\tStarted: 2,\n\tTurningOff: 3\n};\nmodule.exports.ActivityStatus = ActivityStatus;\n\nfunction ActivityAccessory(accessory, log, connection) {\n\tthis._onConnectionChanged = onConnectionChanged.bind(this);\n\tthis._onStateChanged = onStateChanged.bind(this);\n\tHubAccessoryBase.call(this, accessory, connection, ActivityAccessory.typeKey, null, log);\n}\nutil.inherits(ActivityAccessory, HubAccessoryBase);\n\nActivityAccessory.typeKey = 'activity';\n\nActivityAccessory.createAsync = function(accessory, log, connection) {\n\tvar acc = new ActivityAccessory(accessory, log, connection);\n\treturn acc.initAsync()\n\t\t.return(acc);\n};\n\nActivityAccessory.prototype.initAsync = function() {\n\tif (!this.connection) return Promise.resolve();\n\n\tthis.log(\"Fetching Logitech Harmony activities...\");\n\tvar self = this;\n\treturn Promise.all([\n\t\t\tthis.connection.invokeAsync(function(client){\n\t\t\t\treturn client.getActivities();\n\t\t\t}),\n\t\t\tthis.connection.invokeAsync(function(client){\n\t\t\t\treturn client.getCurrentActivity();\n\t\t\t})\n\t\t])\n\t\t.bind(this)\n\t\t.spread(function (activities, currentActivity) {\n\t\t\tself.log(\"Found activities: \\n\" + activities.map(function (a) {\n\t\t\t\t\treturn \"\\t\" + a.label;\n\t\t\t\t}).join(\"\\n\"));\n\t\t\tself._updateActivities(activities);\n\t\t\tself._updateActivityState(currentActivity);\n\t\t})\n\t\t.catch(function (err) {\n\t\t\tself.log('Unable to get current activity with error', err);\n\t\t\tthrow err;\n\t\t});\n};\n\nActivityAccessory.prototype.updateConnection = function() {\n\tvar oldConn = this.connection;\n\tvar rtn = HubAccessoryBase.prototype.updateConnection.apply(this, arguments);\n\tvar newConn = this.connection;\n\tif (oldConn != newConn) {\n\t\tif (oldConn) {\n\t\t\toldConn.removeListener(HubConnection.Events.ConnectionChanged, this._onConnectionChanged);\n\t\t\toldConn.removeListener(HubConnection.Events.StateDigest, this._onStateChanged);\n\t\t}\n\t\tif (newConn) {\n\t\t\tnewConn.addListener(HubConnection.Events.ConnectionChanged, this._onConnectionChanged);\n\t\t\tnewConn.addListener(HubConnection.Events.StateDigest, this._onStateChanged);\n\t\t}\n\t}\n\treturn rtn;\n};\n\nvar onConnectionChanged = function(connStatus) {\n\tif (connStatus == HubConnectionStatus.Connected) {\n\t\t//TODO: Refresh Activity List\n\t\tthis.refreshActivityAsync();\n\t}\n};\nvar onStateChanged = function(args) {\n\tvar stateDigest = args.stateDigest;\n\tvar activityId = stateDigest && stateDigest.activityId;\n\tthis._updateActivityState(activityId);\n};\n\nActivityAccessory.prototype._updateActivities = function(list) {\n\tvar self = this;\n\tvar filteredActivities = _.filter(list, isNotPowerOffActivity);\n\tvar activities = _.sortBy(filteredActivities, 'label');\n\tvar actAccList = this._getActivityServices();\n\tif (!_.isEmpty(actAccList)) {\n\t\tvar invalidActivityServices = _.differenceWith(actAccList, activities, function (service, activity) {\n\t\t\treturn matchesActivityForService(service, activity);\n\t\t});\n\t\t_.forEach(invalidActivityServices, function (service) {\n\t\t\tself.accessory.removeService(service);\n\t\t});\n\t\t_.forEach(actAccList, self._bindService.bind(self));\n\t}\n\t_.forEach(activities, function(activity) {\n\t\tvar service = self._getActivityService(activity);\n\t\tif (service == null) return;\n\t\tupdateActivityForService(service, activity);\n\t});\n\tthis._updateActivityState();\n};\n\nActivityAccessory.prototype._updateActivityState = function (currentActivity) {\n\tif (currentActivity == null) currentActivity = this._currentActivity;\n\telse this._currentActivity = currentActivity;\n\t_.forEach(this._getActivityServices(), function(service){\n\t\tvar val = getServiceActivityId(service) == currentActivity;\n\t\tservice.getCharacteristic(Characteristic.On).setValue(val, null, true);\n\t});\n};\n\nActivityAccessory.prototype.refreshActivityAsync = function() {\n\tvar self = this;\n\treturn this.connection.invokeAsync(function(client){\n\t\treturn client.getCurrentActivity();\n\t})\n\t.then(self._updateActivityState.bind(self))\n\t.catch(function (err) {\n\t\tself.log('Unable to get current activity with error', err);\n\t\tthrow err;\n\t});\n};\n\nActivityAccessory.prototype._getActivityService = function(activity) {\n\tif (!this.accessory) return null;\n\t//TODO: Use matchesActivityForService\n\tvar activityId = getActivityId(activity);\n\tif (activityId == null) return null;\n\tvar service = _.find(this._getActivityServices(), function(service) {\n\t\treturn getServiceActivityId(service) == activityId;\n\t});\n\tif (!service && isActivityInfo(activity)) {\n\t\tservice = this.accessory.addService(ActivityService, activity);\n\t\tthis._bindService(service);\n\t}\n\treturn service;\n};\n\nActivityAccessory.prototype._getActivityServices = function() {\n\treturn _.filter(this.accessory && this.accessory.services, ActivityService.isInstance);\n};\n\nActivityAccessory.prototype._bindService = function(service) {\n\tif (service._isAccBound) return;\n\n\tvar c = service.getCharacteristic(Characteristic.On);\n\tc.on('set', this._setActivityServiceOn.bind(this, service));\n\n\tservice._isAccBound = true;\n};\nActivityAccessory.prototype._setActivityServiceOn = function(service, isOn, callback, doIgnore) {\n\tif (doIgnore == true) {\n\t\tcallback();\n\t\treturn;\n\t}\n\tvar self = this;\n\tvar actId = isOn ? getServiceActivityId(service) : '-1';\n\tvar c = service.getCharacteristic(Characteristic.On);\n\tvar finish = function() {\n\t\tvar cb = callback;\n\t\tcallback = null;\n\t\tc.removeListener('change', onChange);\n\t\tif (cb) cb.apply(this, arguments);\n\t};\n\tvar onChange = function(args) {\n\t\tif (args.newValue != isOn) return;\n\t\tself.log.debug(\"Preemptively marking finished.\");\n\t\tfinish();\n\t};\n\treturn this.connection\n\t\t.invokeAsync(function(client) {\n\t\t\tself.log.debug(\"Switching to Activity: \" + actId);\n\t\t\tc.addListener('change', onChange);\n\n\t\t\tvar task = client.startActivity(actId);\n\t\t\tself.log.debug(\"Switching Task Started: \" + actId);\n\t\t\treturn task;\n\t\t})\n\t\t.asCallback(finish)\n\t\t.finally(function(){\n\t\t\tself.log.debug(\"Switch Task Finished: \" + actId);\n\t\t});\n};\n\n/**\n * Activity Service\n * @param activity\n * @constructor\n */\nvar ActivityService = function(activity) {\n\tService.Switch.call(this, activity.label, getActivityId(activity));\n\tthis.updateActivity(activity);\n};\n\nActivityService.isInstance = function(service){\n\treturn ((service instanceof ActivityService) || (ActivityService.UUID === service.UUID)) &&\n\t\t(service.subtype != null);\n};\n\n//TODO: Make all activity services ActivityService (aka cached services)\nActivityService.prototype.updateActivity = function(activity) {\n\treturn updateActivityForService(this, activity);\n};\nvar updateActivityForService = function(service, activity) {\n\tservice.activity = activity;\n\tservice.setCharacteristic(Characteristic.Name, activity.label);\n};\n\n//TODO: Make all activity services ActivityService (aka cached services)\nActivityService.prototype.matchesActivity = function(activity) {\n\treturn matchesActivityForService(this, activity);\n};\nvar matchesActivityForService = function(service, activity) {\n\tvar activityId = getActivityId(activity);\n\treturn activityId != null && getServiceActivityId(service) == activityId;\n};\n\n//TODO: Make all activity services ActivityService (aka cached services)\nvar getServiceActivityId = function(service) {\n\tif (!service) service = this;\n\treturn getActivityId(service.activity) || service.subtype;\n};\nObject.defineProperty(ActivityService.prototype, 'activityId', {\n\tget: getServiceActivityId\n});\n\nvar isActivityInfo = function(activity) {\n\treturn activity != null && activity.id != null;\n};\n\nvar getActivityId = function(activity) {\n\treturn isActivityInfo(activity) ? activity.id : activity;\n};\n\nvar isNotPowerOffActivity = function(activity) {\n\tvar activityId = getActivityId(activity);\n\treturn activityId != null && activityId > 0;\n};\n","/home/travis/build/npmtest/node-npmtest-homebridge-harmonyhub/node_modules/homebridge-harmonyhub/lib/hub-accessory-base.js":"/**\n * Created by kraig on 3/28/16.\n */\n\nvar util = require('util');\nvar HubConnection = require('./hub-connection.js');\nvar HubConnectionStatus = require('./hub-connection.js').ConnectionStatus;\nvar AccessoryBase = require('./accessory-base').AccessoryBase;\n\nvar Service, Characteristic;\n\nmodule.exports = function(exportedTypes) {\n\tif (exportedTypes && !Service) {\n\t\tService = exportedTypes.Service;\n\t\tCharacteristic = exportedTypes.Characteristic;\n\t}\n\treturn HubAccessoryBase;\n};\nmodule.exports.HubAccessoryBase = HubAccessoryBase;\n\nfunction HubAccessoryBase(accessory, connection, idKey, name, log) {\n\tvar hubId, hubInfo;\n\tif (connection) {\n\t\thubId = connection.hubId;\n\t\thubInfo = connection.hubInfo;\n\t} else if (accessory && accessory.context) {\n\t\thubId = accessory.context.hubId;\n\t\thubInfo = accessory.context.hubInfo;\n\t}\n\tAccessoryBase.call(this, accessory, hubId + idKey, name || (hubInfo && hubInfo.friendlyName), log);\n\tthis._refreshConnection = refreshConnection.bind(this);\n\tthis.updateConnection(connection);\n}\n\nutil.inherits(HubAccessoryBase, AccessoryBase);\n\nHubAccessoryBase.prototype.updateConnection = function(connection) {\n\tvar oldConn = this.connection;\n\tthis.connection = connection;\n\tthis.refreshHubInfo();\n\n\tif (oldConn != connection) {\n\t\tif (oldConn) {\n\t\t\toldConn.removeListener(HubConnection.Events.ConnectionChanged, this._refreshConnection);\n\t\t}\n\t\tif (connection) {\n\t\t\tconnection.addListener(HubConnection.Events.ConnectionChanged, this._refreshConnection);\n\t\t}\n\t}\n\n\tthis._refreshConnection(connection ? connection.status : null)\n};\n\nvar refreshConnection = function(connStatus) {\n\tvar reachable = connStatus != null && connStatus == HubConnectionStatus.Connected;\n\tthis.accessory.updateReachability(reachable);\n\tthis.log.debug(\"Updated reachability of \" + this.hubId + \" to \" + reachable);\n};\n\nvar setIfNeeded = function(svc, characteristic, value, defaultValue) {\n\tif (value == null && !svc.testCharacteristic(characteristic)) return;\n\tsvc.setCharacteristic(characteristic, value != null ? value : defaultValue);\n};\n\nHubAccessoryBase.prototype.refreshHubInfo = function() {\n\tvar hubInfo = (this.connection && this.connection.hubInfo) || {};\n\n\tvar ctx = this.accessory.context || (this.accessory.context = {});\n\tctx.hubInfo = hubInfo;\n\tctx.hubId = this.connection && this.connection.hubId;\n\n\tvar infoSvc = this.accessory.getService(Service.AccessoryInformation);\n\tsetIfNeeded(infoSvc, Characteristic.FirmwareRevision, hubInfo.current_fw_version, '');\n};\n\n","/home/travis/build/npmtest/node-npmtest-homebridge-harmonyhub/node_modules/homebridge-harmonyhub/lib/hub-connection.js":"/**\n * Created by kraig on 3/20/16.\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar Client = require('harmonyhubjs-client');\nvar Queue = require('queue');\nvar Promise = require('bluebird');\nvar BluebirdExt = require('./bluebird-ext');\n\nvar Events = {\n\tConnectionChanged: 'connectionChanged',\n\tStateDigest: 'stateDigest'\n};\n\nvar ConnectionStatus = {\n\tUnknown: 0,\n\tConnecting: 1,\n\tConnected: 2,\n\tPendingConnection: 3,\n\tDisconnected: 4\n};\n\nfunction HubConnection(hubInfo, log, discover) {\n\tEventEmitter.call(this);\n\tthis.hubId = hubInfo.uuid;\n\tthis.hubInfo = hubInfo;\n\tthis.log = log;\n\tthis._discover = discover;\n\n\tvar self = this;\n\tself._discover.on('online', function (info) {\n\t\tif (!info || info.uuid != self.hubId) return;\n\t\tself._HandleConnectionOnline();\n\t});\n\n\tself._discover.on('offline', function (info) {\n\t\tif (!info || info.uuid != self.hubId) return;\n\t\tself._HandleConnectionOffline();\n\t});\n}\n\nutil.inherits(HubConnection, EventEmitter);\n\nHubConnection.createAsync = function(hubInfo, log, discover) {\n\tvar conn = new HubConnection(hubInfo, log, discover);\n\treturn conn.connectAsync(hubInfo)\n\t\t.return(conn);\n};\n\nHubConnection.prototype.connectAsync = function(hubInfo) {\n\tthis.hubInfo = hubInfo;\n\tthis.client = null;\n\tthis.queue = new Queue();\n\tthis.queue.concurrency = 1;\n\treturn this.refreshAsync();\n};\n\nHubConnection.prototype.disconnectAsync = function() {\n\tvar lastClient = this.client;\n\tvar lastQueue = this.queue;\n\tthis.queue = null;\n\tthis.client = null;\n\tthis._OnConnectionChanged();\n\t//TODO: Properly cancel running tasks\n\tif (lastQueue) lastQueue.end();\n\tif (lastClient) return BluebirdExt.toBlueBird(lastClient.end());\n\treturn Promise.resolve();\n};\n\nHubConnection.prototype._getClientAsync = function() {\n\tvar client = this.client;\n\tif (client) {\n\t\treturn Promise.resolve(client);\n\t}\n\tvar connTask = this._connTask;\n\tif (connTask) {\n\t\treturn connTask;\n\t}\n\tvar self = this;\n\tconnTask = BluebirdExt.toBlueBird(Client(self.hubInfo.ip))\n\t\t.then(function (client) {\n\t\t\tself.log.debug('created new client for hub with uuid ' + self.hubId);\n\n\t\t\tclient._xmppClient.on('offline', self._HandleConnectionOffline.bind(self));\n\n\t\t\tclient.on('stateDigest', function (stateDigest) {\n\t\t\t\tself.log.debug('got state digest. reemit it');\n\t\t\t\tself.emit(Events.StateDigest, {\n\t\t\t\t\tstateDigest: stateDigest\n\t\t\t\t});\n\t\t\t});\n\t\t\tself.client = client;\n\t\t\treturn client;\n\t\t});\n\tthis._connTask = connTask;\n\tthis._OnConnectionChanged();\n\treturn connTask\n\t\t.timeout(30 * 1000)\n\t\t.finally(function() {\n\t\t\tif (self._connTask == connTask) {\n\t\t\t\tself._connTask = null;\n\t\t\t}\n\t\t\tself._OnConnectionChanged();\n\t\t});\n};\n\nObject.defineProperty(HubConnection.prototype, 'status', {\n\tget: function() {\n\t\tif (this.client) return ConnectionStatus.Connected;\n\t\tif (this._connTask) return ConnectionStatus.Connecting;\n\t\tif (this.queue) return ConnectionStatus.PendingConnection;\n\t\tif (this.hubInfo) return ConnectionStatus.Disconnected;\n\t\treturn ConnectionStatus.Unknown;\n\t}\n});\n\nHubConnection.prototype._HandleConnectionOnline = function() {\n\tthis.log.debug(\"Hub went online: \" + this.hubId);\n\treturn this.refresh();\n};\n\nHubConnection.prototype._HandleConnectionOffline = function() {\n\tthis.log.debug('client for hub ' + this.hubInfo.uuid + ' went offline. re-establish.');\n\tthis.client = undefined;\n\treturn this.refresh();\n};\n\nHubConnection.prototype.refresh = function() {\n\tvar self = this;\n\tthis.refreshAsync()\n\t\t.catch(function(err) {\n\t\t\tself.log.debug(err);\n\t\t\tself._OnConnectionChanged();\n\t\t});\n};\n\nHubConnection.prototype.refreshAsync = function() {\n\tthis._OnConnectionChanged();\n\treturn this.invokeAsync(function(client){\n\t\treturn client;\n\t});\n};\n\nHubConnection.prototype._OnConnectionChanged = function() {\n\tvar last = this._lastStatus;\n\tvar status = this.status;\n\tif (last == status) return;\n\tthis._lastStatus = status;\n\tthis.emit(Events.ConnectionChanged, status);\n};\n\nHubConnection.prototype.invokeAsync = function(func) {\n\tvar self = this;\n\treturn new Promise(function(resolve, reject) {\n\t\tself.queue.push(resolve);\n\t\tstartQueueInBackground(self.queue);\n\t})\n\t.then(function(cb){\n\t\treturn self._getClientAsync()\n\t\t\t.then(BluebirdExt.asBlueBird(func))\n\t\t\t.finally(function(){\n\t\t\t\tsetTimeout(cb, 0);\n\t\t\t})\n\t\t\t.catch(function(err){\n\t\t\t\tthrow err;\n\t\t\t});\n\t});\n};\n\nvar startQueueInBackground = function(queue) {\n\tif (queue && !queue.running) {\n\t\tsetTimeout(queue.start.bind(queue), 0);\n\t}\n};\n\nmodule.exports = HubConnection;\nmodule.exports.HubConnection = HubConnection;\nmodule.exports.Events = Events;\nmodule.exports.ConnectionStatus = ConnectionStatus;\n","/home/travis/build/npmtest/node-npmtest-homebridge-harmonyhub/node_modules/homebridge-harmonyhub/lib/bluebird-ext.js":"/**\n * Created by kraig on 3/29/16.\n */\n\nvar Promise = require('bluebird');\n\nvar toBlueBird = function(promise) {\n\tif (!promise || promise instanceof Promise ||\n\t\t!promise.then || typeof promise.then !== \"function\") {\n\t\treturn promise;\n\t}\n\treturn new Promise(function(resolve, reject){\n\t\treturn promise.then(resolve, reject);\n\t});\n};\n\nvar asBlueBird = function(func) {\n\treturn function() {\n\t\treturn toBlueBird(func.apply(this, arguments));\n\t};\n};\n\nmodule.exports = {\n\ttoBlueBird: toBlueBird,\n\tasBlueBird: asBlueBird\n};","/home/travis/build/npmtest/node-npmtest-homebridge-harmonyhub/node_modules/homebridge-harmonyhub/lib/home-platform.js":"/**\n * Created by kraig on 3/20/16.\n */\n\nvar Discover = require('harmonyhubjs-discover');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar _ = require('lodash');\nvar Promise = require('bluebird');\nvar Hub = require('./hub').Hub;\nvar Connection = require('./hub-connection');\nvar AccessoryBase = require('./accessory-base').AccessoryBase;\n\nvar Events = {\n\tDiscoveredHubs: 'discoveredHubs'\n};\n\nmodule.exports = function() {\n\treturn HomePlatform;\n};\nmodule.exports.Events = Events;\nmodule.exports.HomePlatform = HomePlatform;\n\nvar singleton;\n\nfunction HomePlatform(log, config, api) {\n\tEventEmitter.call(this);\n\n\tthis.log = log;\n\n\tif (!config) {\n\t\tlog.warn(\"Ignoring Harmony Platform setup because it is not configured\");\n\t\tthis.disabled = true;\n\t\treturn;\n\t}\n\n\tif (singleton) {\n\t\tlog.warn(\"Ignoring duplicate Harmony Platform.  Only one platform can be defined.  Multi-Hub support is now built into the platform, so multiple definitions are no longer required.\");\n\t\tthis.disabled = true;\n\t\treturn;\n\t}\n\tsingleton = this;\n\n\tif (config.ip_address) {\n\t\tlog.warn(\"Specifying ip_address is no longer supported in the platform, so the specified ip_address will be ignored. The platform is designed for auto discovery of all hubs on the network.\");\n\t}\n\n\tvar self = this;\n\n\tself._discoveredHubs = [];\n\tself._cachedAccessories = [];\n\tself._hubs = {};\n\tself._hubIndex = [];\n\tself._isInitialized = false;\n\tself._autoAddNewHubs = false;\n\n\tself._discover = new Discover(61991);\n\n\tself._discover.on('update', function (hubs) {\n\t\tself.log.debug('received update event from harmonyhubjs-discover. there are ' + hubs.length + ' hubs');\n\t\tself._discoveredHubs = hubs;\n\t\t_.forEach(self._discoveredHubs, self._handleDiscoveredHubAsync.bind(self));\n\t\tself.emit(Events.DiscoveredHubs, hubs);\n\t});\n\t\n\tself._discover.start();\n\n\tif (api) {\n\t\t// Save the API object as plugin needs to register new accessory via this object.\n\t\tself._api = api;\n\n\t\t// Listen to event \"didFinishLaunching\", this means homebridge already finished loading cached accessories\n\t\t// Platform Plugin should only register new accessory that doesn't exist in homebridge after this event.\n\t\t// Or start discover new accessories\n\t\tself._api.on('didFinishLaunching', self._finishInitialization.bind(self));\n\t}\n}\nutil.inherits(HomePlatform, EventEmitter);\n\nHomePlatform.prototype._finishInitialization = function() {\n\tvar self = this;\n\treturn this._finishInitializationAsync()\n\t\t.catch(function(err) {\n\t\t\tself.log.error('Error finishing initialization of HarmonyHub: ' + (err ? (err.stack || err.message || err) : err));\n\t\t});\n};\n\nHomePlatform.prototype._finishInitializationAsync = function() {\n\tthis.log.debug(\"Finalizing Plugin Launch\");\n\tvar self = this;\n\treturn Promise\n\t\t.map(self._cachedAccessories, function(acc) {\n\t\t\tacc.updateReachability(false);\n\t\t\tvar hubId = acc && acc.context && acc.context.hubId;\n\t\t\tif (!hubId) return;\n\t\t\tvar hub = self._hubs[hubId];\n\t\t\tif (hub) return;\n\t\t\thub = new Hub(self.log);\n\t\t\tself._hubs[hubId] = hub;\n\t\t\tself._hubIndex.push(hubId);\n\t\t\treturn self._refreshHubAccessoriesAsync(hubId, hub, false);\n\t\t})\n\t\t.then(function(){\n\t\t\tself._autoAddNewHubs = true;\n\t\t\treturn this._discoveredHubs || [];\n\t\t})\n\t\t.map(self._handleDiscoveredHubAsync.bind(self))\n\t\t.then(function() {\n\t\t\tself._isInitialized = true;\n\t\t});\n};\n\nHomePlatform.prototype._handleDiscoveredHubAsync = function(hubInfo) {\n\tif (!this._autoAddNewHubs) return;\n\n\tvar hubId = hubInfo.uuid;\n\tif (!hubId) return;\n\n\tvar hub = this._hubs[hubId];\n\tif (hub && hub.connection) return;\n\n\tvar conn = new Connection(hubInfo, this.log, this._discover);\n\tif (!hub) {\n\t\thub = new Hub(this.log, conn);\n\t\tthis._hubs[hubId] = hub;\n\t\tthis._hubIndex.push(hubId);\n\t} else {\n\t\thub.updateConnection(conn);\n\t}\n\n\treturn conn.connectAsync(hubInfo)\n\t\t.then(this._refreshHubAccessoriesAsync.bind(this, hubId, hub, true));\n};\n\nHomePlatform.prototype._refreshHubAccessoriesAsync = function(hubId, hub, doRegister) {\n\tvar self = this;\n\tvar cachedAccList = _.filter(self._cachedAccessories, function(acc) {\n\t\treturn acc && acc.context && acc.context.hubId == hubId;\n\t});\n\tvar task = hub.updateAccessoriesAsync(cachedAccList);\n\tif (doRegister) {\n\t\ttask = task\n\t\t\t.tap(function(accList) {\n\t\t\t\tif (!self._api) return;\n\t\t\t\taccList = _.map(accList, function(acc) {\n\t\t\t\t\treturn (acc instanceof AccessoryBase) ? acc.accessory : acc;\n\t\t\t\t});\n\t\t\t\tvar newAccList = _.difference(accList, cachedAccList);\n\t\t\t\tself._api.registerPlatformAccessories(\"homebridge-harmonyhub\", \"HarmonyHub\", newAccList);\n\t\t\t});\n\t}\n\treturn task;\n};\n\nHomePlatform.prototype.configureAccessory = function(accessory) {\n\tif (singleton && singleton != this) {\n\t\treturn singleton.configureAccessory(accessory);\n\t}\n\tif (this.disabled) {\n\t\treturn false;\n\t}\n\tthis.log.debug(\"Plugin - Configure Accessory: \" + accessory.displayName);\n\tif (this._cachedAccessories == null) this._cachedAccessories = [];\n\tthis._cachedAccessories.push(accessory);\n};\n","/home/travis/build/npmtest/node-npmtest-homebridge-harmonyhub/node_modules/homebridge-harmonyhub/lib/hub.js":"/**\n * Created by kraig on 3/20/16.\n */\n\nvar Promise = require('bluebird');\nvar ActivityAccessory = require('./activity-accessory').ActivityAccessory;\nvar _ = require('lodash');\n\nmodule.exports = function(exportedTypes) {\n\treturn Hub;\n};\nmodule.exports.Hub = Hub;\n\nfunction Hub(log, connection) {\n\tthis.connection = connection;\n\tthis.log = log;\n}\n\nHub.prototype.updateConnection = function(connection) {\n\tthis.connection = connection;\n\t_.forEach(this._accessories, function(acc){\n\t\tif (acc.updateConnection) acc.updateConnection(connection);\n\t});\n};\n\nHub.prototype.getAccessoriesAsync = function() {\n\tif (this._accessories) {\n\t\treturn Promise.resolve(this._accessories);\n\t}\n\treturn this.updateAccessoriesAsync();\n};\n\nHub.prototype.updateAccessoriesAsync = function(cachedAccessories) {\n\tvar self = this;\n\tvar conn = this.connection;\n\n\tvar activityCachedAcc = _.find(cachedAccessories, function (acc) {\n\t\treturn acc.context.typeKey = ActivityAccessory.typeKey;\n\t});\n\tvar activityAcc = _.find(this._accessories, function (a) { return a instanceof ActivityAccessory; });\n\tif (!activityAcc) activityAcc = new ActivityAccessory(activityCachedAcc, this.log, conn);\n\tvar activityTask = activityAcc.initAsync().return(activityAcc);\n\n\treturn Promise.all([\n\t\t\tactivityTask\n\t\t])\n\t\t.tap(function(accessories){\n\t\t\tself._accessories = accessories;\n\t\t});\n};\n\n"}